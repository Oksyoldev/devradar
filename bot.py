import os
import asyncio
import re
import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, Chat
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes,
    ConversationHandler
)
from dotenv import load_dotenv
from db import posts_col, users_col, channels_col
from filters import text_matches_filters, normalize

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = []
try:
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    if admin_ids_str:
        ADMIN_IDS = [int(id_str.strip()) for id_str in admin_ids_str.split(",") if id_str.strip()]
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ADMIN_IDS: {e}")

print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {ADMIN_IDS}")

if not ADMIN_IDS:
    print("ADMIN_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

ASK_COUNT, ASK_WORDS = range(2)
MANAGE_FILTERS, DELETE_FILTER = range(2, 4)
ADD_CHANNEL_INPUT = 5
CONFIRM_CHANNEL = 6
MAX_FILTERS = 10
ADD_CHANNEL = 5

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø ‚Äî –±–æ—Ç DevRadar, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã –≤ IT-—Å—Ñ–µ—Ä–µ.\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –¥–µ—Å—è—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, "
        "–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n"
        "‚ú® <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
        "üöÄ <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:</b>\n"
        "1. –î–æ–±–∞–≤—å —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /add_filter\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "3. –ü–æ–ª—É—á–∞–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏!\n\n"
        "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/add_filter - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "/manage - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
        "/channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        "/help - –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
        "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /add_filter —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä!"
    )
    
    await update.message.reply_text(
        welcome_message,
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def add_filter_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = await users_col.find_one({"user_id": user_id})
    
    if user_data and len(user_data.get("filters_list", [])) >= MAX_FILTERS:
        await update.message.reply_text(
            "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Ñ–∏–ª—å—Ç—Ä–æ–≤. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /manage",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    keyboard = [
        ["1", "2", "3"],
        ["4", "5", "6"],
        ["7", "8", "9"],
        ["10"]
    ]
    await update.message.reply_text(
        "üîç –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä!\n"
        "–°–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä–µ? (1-10)\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ \"Python —É–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞\" –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 3 —Å–ª–æ–≤–∞</i>",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, 
            one_time_keyboard=True, 
            resize_keyboard=True
        ),
        parse_mode='HTML'
    )
    return ASK_COUNT

async def ask_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        count = int(update.message.text)
        if count < 1 or count > 10:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")
        return ASK_COUNT
    
    context.user_data["count"] = count
    
    word_text = "—Å–ª–æ–≤–æ" if count == 1 else "—Å–ª–æ–≤–∞"
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ {count} {word_text} –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_WORDS

async def save_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    count = context.user_data.get("count")
    
    if not count:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return ConversationHandler.END
    
    words = [w.strip() for w in update.message.text.split(",")]
    
    if len(words) != count:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞! –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {count} —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ASK_WORDS
    
    new_filter = [[word] for word in words]
    
    await users_col.update_one(
        {"user_id": user_id},
        {"$push": {"filters_list": {"$each": [new_filter], "$slice": -MAX_FILTERS}}},
        upsert=True
    )
    
    user_data = await users_col.find_one({"user_id": user_id})
    filter_count = len(user_data.get("filters_list", []))
    
    await update.message.reply_text(
        f"‚úÖ –§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {filter_count}/{MAX_FILTERS}\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"
    )
    
    return ConversationHandler.END

async def manage_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        user_data = await users_col.find_one({"user_id": user_id})
        
        if not user_data or not user_data.get("filters_list"):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            return ConversationHandler.END
        
        filters = user_data["filters_list"]
        response = ["üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:"]
        
        for i, f in enumerate(filters, 1):
            words = [group[0] for group in f]
            response.append(f"{i}. {', '.join(words)}")
        
        response.append("\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        await update.message.reply_text("\n".join(response))
        
        return DELETE_FILTER
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ manage_filters: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def delete_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user:
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    try:
        filter_num = int(update.message.text)
        if filter_num < 1:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞:")
        return DELETE_FILTER
    
    user_data = await users_col.find_one({"user_id": user_id})
    if not user_data or not user_data.get("filters_list"):
        await update.message.reply_text("–§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    filters = user_data["filters_list"]
    if filter_num > len(filters):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞")
        return DELETE_FILTER
    
    del filters[filter_num-1]
    
    await users_col.update_one(
        {"user_id": user_id},
        {"$set": {"filters_list": filters}}
    )
    
    await update.message.reply_text(f"–§–∏–ª—å—Ç—Ä #{filter_num} —É–¥–∞–ª–µ–Ω!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        channel_post = update.channel_post
        if not channel_post or not channel_post.text:
            return

        chat = channel_post.chat
        channel_id = chat.id
        channel_username = f"@{chat.username}" if chat.username else None
        channel_title = chat.title

        channel_in_db = await channels_col.find_one({
            "$or": [
                {"channel_id": channel_id},
                {"channel_username": channel_username},
                {"channel_title": channel_title}
            ]
        })
        
        if not channel_in_db:
            print(f"–ü–æ—Å—Ç –∏–∑ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {channel_title} (ID: {channel_id}, {channel_username})")
            return

        text = channel_post.text
        message_id = channel_post.message_id

        exists = await posts_col.find_one({"channel_id": channel_id, "message_id": message_id})
        if exists:
            return

        await posts_col.insert_one({
            "channel_id": channel_id,
            "channel_username": channel_username,
            "channel_title": channel_title,
            "message_id": message_id,
            "text": text,
            "processed_at": datetime.datetime.utcnow()
        })

        if channel_username:
            username = channel_username.lstrip('@')
            post_link = f"https://t.me/{username}/{message_id}"
        else:
            channel_id_num = str(channel_id).replace('-100', '')
            post_link = f"https://t.me/c/{channel_id_num}/{message_id}"

        async for user in users_col.find({}):
            if "filters_list" not in user:
                continue
                
            for user_filter in user["filters_list"]:
                try:
                    if text_matches_filters(text, user_filter):
                        try:
                            await context.bot.forward_message(
                                chat_id=user["user_id"],
                                from_chat_id=channel_id,
                                message_id=message_id
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                            highlighted_text = text
                            for group in user_filter:
                                for word in group:
                                    for variant in normalize(word):
                                        if variant.lower() in text.lower():
                                            pattern = re.compile(re.escape(variant), re.IGNORECASE)
                                            highlighted_text = pattern.sub(f'<b>{variant}</b>', highlighted_text)
                            
                            await context.bot.send_message(
                                chat_id=user["user_id"],
                                text=(f"üîî <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {channel_title}</b>\n\n"
                                      f"{highlighted_text}\n\n"
                                      f"<a href='{post_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç</a>"),
                                parse_mode='HTML',
                                disable_web_page_preview=True
                            )
                        break
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")
                    continue
                    
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_channel_post: {e}")

async def list_tracked_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channels = []
    async for channel in channels_col.find({}):
        channel_title = channel.get("channel_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        channel_id = channel.get("channel_id", "N/A")
        username = channel.get("channel_username")
        added_date = channel.get("added_at", datetime.datetime.utcnow())
        
        formatted_date = added_date.strftime("%d.%m.%Y")
        
        if username:
            clean_username = username.lstrip('@')
            channel_str = (
                f"‚Ä¢ <a href='https://t.me/{clean_username}'>{channel_title}</a> "
                f"(@{clean_username})\n"
                f"<i>–î–æ–±–∞–≤–ª–µ–Ω: {formatted_date}</i>"
            )
        else:
            if f"ID: {channel_id}" in channel_title:
                display_text = channel_title
            else:
                display_text = f"{channel_title} (ID: {channel_id})"
                
            channel_str = (
                f"‚Ä¢ {display_text}\n"
                f"<i>–î–æ–±–∞–≤–ª–µ–Ω: {formatted_date}</i>"
            )
        
        channels.append(channel_str)
    
    if channels:
        response = (
            f"üì¢ <b>–ö–∞–Ω–∞–ª—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –±–æ—Ç–æ–º:</b>\n\n" +
            "\n\n".join(channels) +
            f"\n\n–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <b>{len(channels)}</b>"
        )
    else:
        response = "‚ÑπÔ∏è –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    
    await update.message.reply_text(response, parse_mode='HTML', disable_web_page_preview=True)


async def add_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, —é–∑–µ—Ä–Ω–µ–π–º (@username) –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞:\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- https://t.me/jobjobjob7\n"
        "- @jobjobjob7\n"
        "- -1001234567890"
    )
    return ADD_CHANNEL

async def process_channel_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    channel_identifier = None
    
    if user_input.startswith("https://t.me/"):
        channel_identifier = user_input.split("/")[-1]
    elif user_input.startswith("@"):
        channel_identifier = user_input
    elif user_input.startswith("-100"):
        try:
            channel_id = int(user_input)
            channel_identifier = channel_id
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return ADD_CHANNEL
    else:
        if user_input.isdigit() or (user_input.startswith('-') and user_input[1:].isdigit()):
            try:
                channel_identifier = int(user_input)
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return ADD_CHANNEL
        else:
            channel_identifier = f"@{user_input}" if not user_input.startswith("@") else user_input
    
    context.user_data["channel_identifier"] = channel_identifier
    
    try:
        await asyncio.sleep(3)
        
        try:
            chat = await context.bot.get_chat(chat_id=channel_identifier)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
            if isinstance(channel_identifier, int):
                try:
                    await context.bot.get_chat_member(chat_id=channel_identifier, user_id=context.bot.id)
                except Exception as e:
                    await update.message.reply_text(
                        "–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª! "
                        "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º '–†–∞–∑–º–µ—â–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                    )
                    return ConversationHandler.END
                chat = await context.bot.get_chat(chat_id=channel_identifier)
            else:
                raise e
        
        if chat.type != Chat.CHANNEL:
            await update.message.reply_text("–≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:")
            return ADD_CHANNEL
        
        channel_info = {
            "id": chat.id,
            "username": f"@{chat.username}" if chat.username else None,
            "title": chat.title
        }
        
        context.user_data["channel_info"] = channel_info
        
        await update.message.reply_text(
            f"–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {chat.title}\n"
            f"ID: {chat.id}\n"
            f"Username: @{chat.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )
        return CONFIRM_CHANNEL
    
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        if isinstance(channel_identifier, int) or (isinstance(channel_identifier, str) and channel_identifier.replace('-', '').isdigit()):
            channel_id = int(channel_identifier) if isinstance(channel_identifier, str) else channel_identifier
            
            try:
                chat = await context.bot.get_chat(chat_id=channel_id)
                channel_title = chat.title
            except:
                channel_title = f"–ö–∞–Ω–∞–ª ID: {channel_id}"
            
            context.user_data["channel_info"] = {
                "id": channel_id,
                "username": None,
                "title": channel_title
            }
            
            await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª, –Ω–æ ID –ø–æ–ª—É—á–µ–Ω.\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_title}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
            )
            return CONFIRM_CHANNEL
        else:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "3. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–æ '–†–∞–∑–º–µ—â–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ADD_CHANNEL

async def check_bot_admin(context, chat_id):
    try:
        members = await context.bot.get_chat_administrators(chat_id)
        for member in members:
            if member.user.id == context.bot.id:
                return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False

async def force_add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /force_add_channel <ID –∫–∞–Ω–∞–ª–∞>")
        return
    
    try:
        channel_id = int(context.args[0])
        
        try:
            chat = await context.bot.get_chat(chat_id=channel_id)
            channel_title = chat.title
            channel_username = f"@{chat.username}" if chat.username else None
        except:
            channel_title = f"–ö–∞–Ω–∞–ª ID: {channel_id}"
            channel_username = None
        
        existing = await channels_col.find_one({"channel_id": channel_id})
        if existing:
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return
        
        await channels_col.insert_one({
            "channel_id": channel_id,
            "channel_username": channel_username,
            "channel_title": channel_title,
            "added_by": user_id,
            "added_at": datetime.datetime.utcnow()
        })
        
        await update.message.reply_text(f"–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω! –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_title}")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def confirm_channel_addition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.lower()
    channel_info = context.user_data.get("channel_info")
    
    if not channel_info:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /add_channel")
        return ConversationHandler.END
    
    if response == "–¥–∞":
        existing_channel = await channels_col.find_one({
            "$or": [
                {"channel_id": channel_info["id"]},
                {"channel_username": channel_info["username"]}
            ]
        })
        
        if existing_channel:
            await update.message.reply_text("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.")
            return ConversationHandler.END
        
        await channels_col.insert_one({
            "channel_id": channel_info["id"],
            "channel_username": channel_info["username"],
            "channel_title": channel_info["title"],
            "added_by": update.effective_user.id,
            "added_at": datetime.datetime.utcnow()
    })
        
        await update.message.reply_text(
            f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_info['title']}\n"
            f"ID: {channel_info['id']}\n"
            f"Username: {channel_info['username'] or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
        )
    else:
        await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    return ConversationHandler.END

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    channels = []
    async for channel in channels_col.find({}):
        channels.append(
            f"üì¢ {channel.get('channel_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"ID: {channel['channel_id']}\n"
            f"Username: {channel.get('channel_username', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω: {channel.get('added_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        )

    if not channels:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    response = "üì¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n" + "\n\n".join(channels)
    await update.message.reply_text(response, parse_mode='HTML')

async def delete_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_channel <ID –∫–∞–Ω–∞–ª–∞>")
        return

    try:
        channel_id = int(context.args[0])
        result = await channels_col.delete_one({"channel_id": channel_id})
        if result.deleted_count > 0:
            await update.message.reply_text(f"–ö–∞–Ω–∞–ª —Å ID {channel_id} —É–¥–∞–ª–µ–Ω.")
        else:
            await update.message.reply_text(f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ DevRadar</b>\n\n"
        "üîç <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "1. –í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, —É–¥–∞–ª—ë–Ω–Ω–æ, junior)\n"
        "2. –ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏\n"
        "3. –ö–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞–∫–∞–Ω—Å–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
        "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add_filter - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä\n"
        "/manage - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
        "/channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
        "‚öôÔ∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ –í –∫–∞–∂–¥–æ–º —Ñ–∏–ª—å—Ç—Ä–µ –æ—Ç 1 –¥–æ 10 —Å–ª–æ–≤\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "‚Ä¢ –†–∞–∑–¥–µ–ª—è–π—Ç–µ —Å–ª–æ–≤–∞ –∑–∞–ø—è—Ç—ã–º–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @oksyol | @tozhest"
    )
    
    await update.message.reply_text(help_text, parse_mode='HTML')

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    add_filter_conv = ConversationHandler(
        entry_points=[CommandHandler("add_filter", add_filter_start)],
        states={
            ASK_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_words)],
            ASK_WORDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_filter)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END
        }
    )
    
    manage_conv = ConversationHandler(
        entry_points=[CommandHandler("manage", manage_filters)],
        states={
            DELETE_FILTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_filter)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    add_channel_conv = ConversationHandler(
        entry_points=[CommandHandler("add_channel", add_channel_command)],
        states={
            ADD_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_channel_input)],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            CONFIRM_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_channel_addition)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(add_filter_conv)
    app.add_handler(CommandHandler("channels", list_tracked_channels))
    app.add_handler(manage_conv)
    app.add_handler(CommandHandler("list_channels", list_channels))
    app.add_handler(CommandHandler("delete_channel", delete_channel))
    app.add_handler(CommandHandler("force_add_channel", force_add_channel))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(add_channel_conv)
    app.add_handler(MessageHandler(filters.UpdateType.CHANNEL_POST, handle_channel_post))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    import platform
    import asyncio
    import datetime
    
    if platform.system() == "Windows":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    main()